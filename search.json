[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_card",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "nbdev_card"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "nbdev_card",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall nbdev_card in Development mode\n# make sure nbdev_card package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to nbdev_card\n$ nbdev_prepare",
    "crumbs": [
      "nbdev_card"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "nbdev_card",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/ballou88/nbdev_card.git\nor from conda\n$ conda install -c ballou88 nbdev_card\nor from pypi\n$ pip install nbdev_card\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "nbdev_card"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_card",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\nCard(1,3)\n\n3♦️\n\n\n\nsuits\n\n['♣️', '♦️', '❤️', '♠️']",
    "crumbs": [
      "nbdev_card"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card–A basic playing card",
    "section": "",
    "text": "We will be using numbers to represent playing card clubs and ranks. These are the suits:\nsuits\n\n['♣️', '♦️', '❤️', '♠️']\nFor insance the suit at index 0:\nsuits[0]\n\n'♣️'\nThese are the ranks:\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nFor instance the rank at index 1 (note that there isn’t a playing card at position 0, since we want the ranks to match the indicies where possible):\nranks[1]\n\n'A'\nsource",
    "crumbs": [
      "card--A basic playing card"
    ]
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card–A basic playing card",
    "section": "Comparison Operators",
    "text": "Comparison Operators\nEquality, less than, and greater than work on the rank and suit indices:\n\nsource\n\nCard.__eq__\n\n Card.__eq__ (a:__main__.Card)\n\nReturn self==value.\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=2, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=1, rank=2), Card(suit=1, rank=3))\n\n\nsource\n\n\nCard.__lt__\n\n Card.__lt__ (a:__main__.Card)\n\nReturn self&lt;value.\n\nassert Card(suit=1, rank=3) &lt; Card(suit=2, rank=3)\n\n\nsource\n\n\nCard.__gt__\n\n Card.__gt__ (a:__main__.Card)\n\nReturn self&gt;value.\n\nassert Card(suit=3, rank=3) &gt; Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3) &gt; Card(suit=2, rank=3)",
    "crumbs": [
      "card--A basic playing card"
    ]
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "Deck",
    "section": "",
    "text": "#! export\nfrom nbdev_card.card import *\nfrom fastcore.utils import *\nimport random\n\n\nsource\n\nDeck\n\n Deck ()\n\nA deck of 52 cars, not including jokers\n\ndeck = Deck()\ndeck\n\nA♣️; 2♣️; 3♣️; 4♣️; 5♣️; 6♣️; 7♣️; 8♣️; 9♣️; 10♣️; J♣️; Q♣️; K♣️; A♦️; 2♦️; 3♦️; 4♦️; 5♦️; 6♦️; 7♦️; 8♦️; 9♦️; 10♦️; J♦️; Q♦️; K♦️; A❤️; 2❤️; 3❤️; 4❤️; 5❤️; 6❤️; 7❤️; 8❤️; 9❤️; 10❤️; J❤️; Q❤️; K❤️; A♠️; 2♠️; 3♠️; 4♠️; 5♠️; 6♠️; 7♠️; 8♠️; 9♠️; 10♠️; J♠️; Q♠️; K♠️\n\n\nThat should be 52 cards.\n\ntest_eq(len(deck), 52)\n\nAs a reminder, these are the suits we defined for a Card\n\nsuits\n\n['♣️', '♦️', '❤️', '♠️']\n\n\nWe can check if a card is in the deck. In this case we check for the Ace of Clubs\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove and return one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaults to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13)) # K♠️\n\nThere are 51 cards left in the deck now.\n\ntest_eq(len(deck), 51)\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_card.card.Card)\n\nRemoves card from the deck or raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ncard23 = Card(2,3)\ndeck.remove(card23)\n\nassert card23 not in deck\n\n\nsource\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffles the cards in this deck\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement if replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\n\n\ndraw_n(13, replace=False)\n\n[Q♠️, 8♠️, K♦️, 7♠️, 3♠️, 4❤️, A♣️, K♣️, 4♦️, Q❤️, J♠️, J♣️, 4♣️]",
    "crumbs": [
      "Deck"
    ]
  }
]